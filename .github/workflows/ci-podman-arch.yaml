---
name: ci-podman-arch

on:
  workflow_call:
    inputs:
      architecture:
        description: "CPU Architecture for Build"
        type: string
        required: true
      args_file:
        description: "Path to build-arg file"
        type: string
        required: false
        default: ".args"
      containerfile:
        description: "Path to Containerfile"
        type: string
        required: false
        default: "Containerfile"
      registry_name:
        description: "Registry to publish images"
        type: string
        required: false
        default: "docker.io" 
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_TOKEN:
        required: true

jobs:
  integrate:
    name: CI: Build and Publish Image 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Super-Linter
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_DOCKERFILE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKERFILE_FILE_NAME: ${{ inputs.containerfile }}
  
      - name: Export .args to GITHUB_ENV (if present)
        if: ${{ hashFiles(inputs.args_file) != '' }}
        run: |
          while IFS='=' read -r key value; do
            echo "$key=$value" >> "$GITHUB_ENV"
          done < "${{ inputs.args_file }}"
      
      - name: Install Podman + QEMU
        run: |
          sudo apt-get update
          sudo apt-get install --yes qemu-user-static binfmt-support podman
          sudo update-binfmts --enable qemu-${{ inputs.architecture }}
      
      - name: Docker Hub login
        run: |
          echo "${{ secrets.REGISTRY_TOKEN }}" | podman login \
            --username "${{ secrets.REGISTRY_USERNAME }}" \
            --password-stdin ${{ inputs.registry_name }}
      
      - name: Build ${{ inputs.architecture }} image
        run: |
          TAG="${{ inputs.registry_name }}/${{ secrets.REGISTRY_USERNAME }}/"
          TAG="${TAG}${IMAGE_NAME}:build-${{ inputs.architecture }}"
          export TAG
          podman build \
            --arch ${{ inputs.architecture }} \
            --build-arg-file ${{ inputs.args_file }} \
            --file ${{ inputs.containerfile }} \
            --no-cache \
            --tag "${TAG}" .
      
      - name: Publish dev-${{ inputs.architecture }} image
        run: |
          # NAMESPACE="${{ secrets.REGISTRY_USERNAME }}/${{ secrets.REGISTRY_USERNAME }}"
          # P_IMG="docker.io/${NAMESPACE}"
          # for ARCH in amd64 aarch64; do
          #   S_IMG="${{ inputs.image_name }}:${{ inputs.dev_tag }}-${ARCH}"
          #   podman tag "$S_IMG" "$P_IMG/$S_IMG"
          podman push "${TAG}"
          which podman
          # done
