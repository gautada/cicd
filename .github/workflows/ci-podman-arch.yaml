---
name: ci-podman-arch

on:
  workflow_call:
    inputs:
      architecture:
        description: "CPU Architecture for Build"
        type: string
        required: true
      args_file:
        description: "Path to build-arg file"
        type: string
        required: false
        default: ".args"
      containerfile:
        description: "Path to Containerfile"
        type: string
        required: false
        default: "Containerfile"
      registry_name:
        description: "Registry to publish images"
        type: string
        required: false
        default: "docker.io" 
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_TOKEN:
        required: true

jobs:
  ci:
    name: "Build & Publish Image(${{ inputs.architecture }})" 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Export .args to GITHUB_ENV (if present)
        if: ${{ hashFiles(inputs.args_file) != '' }}
        run: |
          while IFS='=' read -r key value; do
            echo "$key=$value" >> "$GITHUB_ENV"
          done < "${{ inputs.args_file }}"
      
      - name: Install Podman + QEMU
        run: |
          sudo /usr/bin/apt-get update
          sudo /usr/bin/apt-get install --yes qemu-user-static binfmt-support podman
          if [ "${{ inputs.architecture }}" = "arm64" ]; then
            sudo update-binfmts --enable qemu-aarch64 || true
          fi
          # wich update-binftms
      
      - name: Build and Publish Manifest(dev)
        run: |
          echo "${{ secrets.REGISTRY_TOKEN }}" | /usr/bin/podman login \
            --username "${{ secrets.REGISTRY_USERNAME }}" \
            --password-stdin ${{ inputs.registry_name }}
      
      - name: Build and Publish Image
        run: |
          TAG="${{ inputs.registry_name }}/${{ secrets.REGISTRY_USERNAME }}/"
          TAG="${TAG}$(pwd | awk -F'/' '{print $NF}'):build-${{ inputs.architecture }}-$(/usr/bin/git rev-parse --short HEAD)"
          /usr/bin/podman build \
            --arch "${{ inputs.architecture }}" \
            --build-arg-file ${{ inputs.args_file }} \
            --file ${{ inputs.containerfile }} \
            --no-cache \
            --tag "${TAG}" .
          /usr/bin/podman push "${TAG}"
          
